trigger:
  branches:
    include:
      - main  # Runs the pipeline on every push to main

pool:
  name: 'Default'  # Use self-hosted agent pool

variables:
  ACR_NAME: 'lanceoacr'  # Azure Container Registry name (lowercase)
  AKS_CLUSTER: 'aks-cluster'
  RESOURCE_GROUP: 'k8s-resource-group'
  IMAGE_NAME: 'my-app'
  IMAGE_TAG: '$(Build.BuildId)'  # Unique image tag

steps:
  - checkout: self  # Ensures the latest code is checked out

  - script: |
      $ErrorActionPreference = "Stop"
      Write-Host "üîç Checking if Azure CLI is installed..."
      if (-Not (Get-Command az -ErrorAction SilentlyContinue)) {
          Write-Host "‚ö†Ô∏è Azure CLI not found! Installing..."
          Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile AzureCLI.msi
          Start-Process msiexec.exe -ArgumentList '/I AzureCLI.msi /quiet /norestart' -NoNewWindow -Wait
      }
      
      Write-Host "üîê Logging into Azure..."
      az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
      
      Write-Host "üîê Logging into Azure Container Registry..."
      az acr login --name $(ACR_NAME)
    displayName: 'Authenticate to Azure and ACR'
    shell: pwsh  # Run on PowerShell

  - script: |
      $ErrorActionPreference = "Stop"
      Write-Host "üê≥ Building Docker image..."
      docker build -t $(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(IMAGE_TAG) .
      
      Write-Host "üöÄ Pushing Docker image to ACR..."
      docker push $(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(IMAGE_TAG)
    displayName: 'Build & Push Docker Image'
    shell: pwsh

  - task: HelmInstaller@1
    inputs:
      helmVersionToInstall: 'latest'

  - script: |
      $ErrorActionPreference = "Stop"
      Write-Host "üîë Getting AKS credentials..."
      az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(AKS_CLUSTER) --overwrite-existing
      
      Write-Host "üö¢ Deploying to AKS with Helm..."
      helm upgrade --install my-app ./my-app `
        --set image.repository=$(ACR_NAME).azurecr.io/$(IMAGE_NAME) `
        --set image.tag=$(IMAGE_TAG) `
        --wait
    displayName: 'Deploy to AKS'
    shell: pwsh

